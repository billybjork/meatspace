# ───────────── render.yaml (drop-in) ─────────────
envVarGroups:
  - name: app-secrets
    envVars:
      - key: AWS_REGION
        value: "us-west-1"
      # add S3_BUCKET_NAME, AWS_ACCESS_KEY_ID,
      # AWS_SECRET_ACCESS_KEY, CLOUDFRONT_DOMAIN
      # in the Render UI

# ───────────── Databases ─────────────
databases:
  - name: app-db
    plan: basic-1gb
    postgresMajorVersion: 16
    ipAllowList: []

  - name: prefect-db
    plan: basic-1gb
    postgresMajorVersion: 16
    ipAllowList: []

# ───────────── Services ─────────────
services:

# --- Prefect Server --------------------------------------------------
  - name: prefect-server
    type: pserv
    env: docker
    plan: starter
    rootDir: backend
    dockerfilePath: Dockerfile.prefect-server

    dockerCommand: >
      sh -c "export PREFECT_API_DATABASE_CONNECTION_URL=\$(echo \"$PREFECT_CONNECTION_STRING\" | sed 's/^postgres/postgresql+asyncpg/')'?sslmode=require' &&
      exec python -m prefect server start --host 0.0.0.0 --port 4200"

    disk:
      name: prefect-home
      mountPath: /.prefect
      sizeGB: 5

    envVars:
      - key: PREFECT_CONNECTION_STRING
        fromDatabase:
          name: prefect-db
          property: connectionString

      - key: PREFECT_SERVER_API_HOST
        value: "0.0.0.0"
      - key: PREFECT_UI_API_URL
        value: "http://prefect-server:4200/api"

      - fromGroup: app-secrets

# --- Prefect Worker --------------------------------------------------
  - name: prefect-worker
    type: worker
    env: docker
    plan: starter
    rootDir: backend
    dockerfilePath: Dockerfile
    dockerCommand: >
      sh -c '
        until curl -fsS http://prefect-server:4200/api/health; do sleep 5; done &&
        exec prefect worker start --pool default-agent-pool
      '
    numInstances: 1
    envVars:
      - key: PREFECT_API_URL
        value: "http://prefect-server:4200/api"
      - key: PREFECT_WORKER_CONCURRENCY_LIMIT
        value: "3"
      - key: DATABASE_URL
        fromDatabase:
          name: app-db
          property: connectionString
      - fromGroup: app-secrets

# --- Phoenix LiveView Web -------------------------------------------
  - name: phoenix-web
    type: web
    env: docker
    plan: starter
    rootDir: frontend
    dockerfilePath: Dockerfile
    healthCheckPath: /
    dockerCommand: >
      /app/_build/prod/rel/frontend/bin/frontend start
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: app-db
          property: connectionString
      - key: PHX_SERVER
        value: "true"
      - key: SECRET_KEY_BASE
        generateValue: true
      - fromGroup: app-secrets